const defaults = { duration: 250 },
	toggle = (el, visible, opts) => {
		Object.assign(el.style, { maxHeight: '', display: 'block' });
		const { height } = el.getBoundingClientRect(),
			kf = [0, height],
			[from, to] = visible ? kf : kf.slice().reverse(),
			anim = el.animate([{ maxHeight: `${ from }px` }, { maxHeight: `${ to }px` }], { ...defaults, ...opts });

		anim.onfinish = () => Object.assign(el.style, { maxHeight: '', display: visible ? '' : 'none' });
	};

class Collapse extends HTMLElement {
	static get observedAttributes() {
		return ['opened'];
	}
	constructor() {
		super();
		Object.assign(this.style, { display: 'none', overflow: 'hidden' });
	}
	attributeChangedCallback(name, prevValue, value) {
		switch (name) {
		case 'opened': {
			const visible = value != null;
			return this.isConnected
				? toggle(this, visible)
				: Object.assign(this.style, { display: visible ? '' : 'none' });
		}
		}
	}
}
customElements.define('cz-collapse', Collapse);
